{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nconst initialState = {\n  count: 0\n};\nconst userInitialState = {\n  username: 'wn'\n};\nconst ADD = 'ADD';\n\nfunction counterReducer(state = initialState, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case ADD:\n      return {\n        count: state.count + (action.num || 1)\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME';\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducer = combineReducers({\n  counter: counterReducer,\n  user: userReducer\n}); // {counter:initialState, user:userInitialState}\n\nconst store = createStore(allReducer, {\n  counter: counterReducer,\n  user: userReducer\n}, applyMiddleware(ReduxThunk)); //action creatore\n\nfunction add(num) {\n  return {\n    type: ADD,\n    num\n  };\n}\n\nfunction addAsync(num) {\n  return dispatch => {\n    setTimeout(() => {\n      // dispatch(num)\n      return {\n        type: ADD,\n        num\n      };\n    }, 1000);\n  };\n} //  console.log(store.getState());\n\n\nstore.dispatch(add(3)); //  console.log(store.getState());\n\nstore.subscribe(() => {\n  console.log('change' + store.getState());\n});\nstore.dispatch(addAsync(5));\nstore.dispatch({\n  type: UPDATE_USERNAME,\n  name: 'mg'\n});\nexport default store;","map":{"version":3,"sources":["E:/javascript_fullstack/react/next/nextjs-GitHub/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","initialState","count","userInitialState","username","ADD","counterReducer","state","action","console","log","type","num","UPDATE_USERNAME","userReducer","name","allReducer","counter","user","store","add","addAsync","dispatch","setTimeout","subscribe","getState"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AADW,CAAzB;AAIA,MAAMC,GAAG,GAAG,KAAZ;;AACA,SAASC,cAAT,CAAwBC,KAAK,GAAGN,YAAhC,EAA8CO,MAA9C,EAAsD;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAKN,GAAL;AACI,aAAO;AAAEH,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,IAAeM,MAAM,CAACI,GAAP,IAAc,CAA7B;AAAT,OAAP;;AACJ;AACI,aAAOL,KAAP;AAJR;AAMH;;AACD,MAAMM,eAAe,GAAG,iBAAxB;;AACA,SAASC,WAAT,CAAqBP,KAAK,GAAGJ,gBAA7B,EAA+CK,MAA/C,EAAuD;AACnD,UAAQA,MAAM,CAACG,IAAf;AACI,SAAKE,eAAL;AACI,+BACON,KADP;AAEIH,QAAAA,QAAQ,EAAEI,MAAM,CAACO;AAFrB;;AAIJ;AACI,aAAOR,KAAP;AAPR;AASH;;AACD,MAAMS,UAAU,GAAGlB,eAAe,CAAC;AAC/BmB,EAAAA,OAAO,EAAEX,cADsB;AAE/BY,EAAAA,IAAI,EAAEJ;AAFyB,CAAD,CAAlC,C,CAKA;;AAIA,MAAMK,KAAK,GAAGtB,WAAW,CACrBmB,UADqB,EAErB;AACIC,EAAAA,OAAO,EAAEX,cADb;AAEIY,EAAAA,IAAI,EAAEJ;AAFV,CAFqB,EAMrBf,eAAe,CAACC,UAAD,CANM,CAAzB,C,CASA;;AACA,SAASoB,GAAT,CAAaR,GAAb,EAAkB;AACd,SAAO;AACHD,IAAAA,IAAI,EAAEN,GADH;AAEHO,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASS,QAAT,CAAkBT,GAAlB,EAAuB;AACnB,SAAQU,QAAD,IAAc;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACb;AACA,aAAO;AACHZ,QAAAA,IAAI,EAAEN,GADH;AAEHO,QAAAA;AAFG,OAAP;AAIH,KANS,EAMR,IANQ,CAAV;AAOH,GARD;AASH,C,CAGD;;;AACAO,KAAK,CAACG,QAAN,CAAeF,GAAG,CAAC,CAAD,CAAlB,E,CACA;;AAEAD,KAAK,CAACK,SAAN,CAAgB,MAAM;AAClBf,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAWS,KAAK,CAACM,QAAN,EAAvB;AACH,CAFD;AAGAN,KAAK,CAACG,QAAN,CAAeD,QAAQ,CAAC,CAAD,CAAvB;AACAF,KAAK,CAACG,QAAN,CAAe;AAAEX,EAAAA,IAAI,EAAEE,eAAR;AAAyBE,EAAAA,IAAI,EAAE;AAA/B,CAAf;AAEA,eAAeI,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport ReduxThunk from 'redux-thunk'\r\n\r\nconst initialState = {\r\n    count: 0\r\n}\r\n\r\nconst userInitialState = {\r\n    username: 'wn'\r\n}\r\n\r\nconst ADD = 'ADD'\r\nfunction counterReducer(state = initialState, action) {\r\n    console.log(state, action);\r\n\r\n    switch (action.type) {\r\n        case ADD:\r\n            return { count: state.count + (action.num || 1) }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\r\nfunction userReducer(state = userInitialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_USERNAME:\r\n            return {\r\n                ...state,\r\n                username: action.name\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst allReducer = combineReducers({\r\n    counter: counterReducer,\r\n    user: userReducer\r\n})\r\n\r\n// {counter:initialState, user:userInitialState}\r\n\r\n\r\n\r\nconst store = createStore(\r\n    allReducer,\r\n    {\r\n        counter: counterReducer,\r\n        user: userReducer\r\n    },\r\n    applyMiddleware(ReduxThunk)\r\n    )\r\n\r\n//action creatore\r\nfunction add(num) {\r\n    return {\r\n        type: ADD,\r\n        num\r\n    }\r\n}\r\n\r\nfunction addAsync(num) {\r\n    return (dispatch) => {\r\n        setTimeout(() => {\r\n            // dispatch(num)\r\n            return {\r\n                type: ADD,\r\n                num\r\n            }\r\n        },1000)\r\n    }\r\n}\r\n\r\n\r\n//  console.log(store.getState());\r\nstore.dispatch(add(3))\r\n//  console.log(store.getState());\r\n\r\nstore.subscribe(() => {\r\n    console.log('change' + store.getState())\r\n})\r\nstore.dispatch(addAsync(5))\r\nstore.dispatch({ type: UPDATE_USERNAME, name: 'mg' })\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}